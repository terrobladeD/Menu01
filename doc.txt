//MYSQL table creation(auto generated by Node.js)
// order table
CREATE TABLE
IF NOT EXISTS `orders` (
	`id` INTEGER NOT NULL auto_increment,
	`total_price` DOUBLE PRECISION,
	`table_num` INTEGER,
	`date` DATETIME,
	`email` VARCHAR (255),
	`status` TINYINT (1),
	`additional_info` VARCHAR (255),
	`createdAt` DATETIME NOT NULL,
	`updatedAt` DATETIME NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE = INNODB;

// dishes table
CREATE TABLE
IF NOT EXISTS `dishes` (
	`id` INTEGER NOT NULL auto_increment,
	`name` VARCHAR (255),
	`short_name` VARCHAR (255),
	`description` VARCHAR (255),
	`full_description` VARCHAR (255),
	`price_ori` DOUBLE PRECISION,
	`price_cur` DOUBLE PRECISION,
	`is_sold_out` TINYINT (1),
	`type` VARCHAR (255),
	`is_valid` TINYINT (1),
	`pict_url` VARCHAR (255),
	`createdAt` DATETIME NOT NULL,
	`updatedAt` DATETIME NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE = INNODB;

//details table
CREATE TABLE
IF NOT EXISTS `details` (
	`id` INTEGER NOT NULL auto_increment,
	`quantity` INTEGER,
	`createdAt` DATETIME NOT NULL,
	`updatedAt` DATETIME NOT NULL,
	`orderId` INTEGER,
	`dishId` INTEGER,
	PRIMARY KEY (`id`),
	FOREIGN KEY (`orderId`) REFERENCES `orders` (`id`) ON DELETE
SET NULL ON UPDATE CASCADE,
 FOREIGN KEY (`dishId`) REFERENCES `dishes` (`id`) ON DELETE
SET NULL ON UPDATE CASCADE
) ENGINE = INNODB;

//////////////////////////////////////////////////////////////////////

//////////////////
INSERT INTO dishes (name, short_name, description, full_description, price_ori, price_cur, is_sold_out, type, is_valid, pict_url, createdAt, updatedAt) VALUES
('Atlantic Salmon', 'AS', 'description for Atlantic Salmon', 'Full description for Atlantic Salmon', 50, 50, false, 'MAINS', true, 'http://localhost:8080/images/Atlantic Salmon.png', NOW(), NOW()),
('BBQ Prok Ribs', 'BPR', 'description for BBQ Prok Ribs', 'Full description for BBQ Prok Ribs', 65, 65, false, 'MAINS', true, 'http://localhost:8080/images/BBQ Prok Ribs.png', NOW(), NOW()),
('Bruschetta', 'B', 'description for Bruschetta', 'Full description for Bruschetta', 16, 16, false, 'STARTERS & SALADS', true, 'http://localhost:8080/images/Bruschetta.png', NOW(), NOW()),
('Buffalo Wings', 'BW', 'description for Buffalo Wings', 'Full description for Buffalo Wings', 30, 30, false, 'STARTERS & SALADS', true, 'http://localhost:8080/images/Buffalo Wings.png', NOW(), NOW()),
('Caesar Salad', 'CS', 'description for Caesar Salad', 'Full description for Caesar Salad', 35, 35, false, 'STARTERS & SALADS', true, 'http://localhost:8080/images/Caesar Salad.png', NOW(), NOW()),
('Carnivore Pizza', 'CP', 'description for Carnivore Pizza', 'Full description for Carnivore Pizza', 50, 50, false, 'PIZZA', true, 'http://localhost:8080/images/Carnivore Pizza.png', NOW(), NOW()),
('Chicken Parmigiana', 'CP', 'description for Chicken Parmigiana', 'Full description for Chicken Parmigiana', 50, 50, false, 'MAINS', true, 'http://localhost:8080/images/Chicken Parmigiana.png', NOW(), NOW()),
('Club Sandwich', 'CS', 'description for Club Sandwich', 'Full description for Club Sandwich', 30, 30, false, 'BURGERS & SANDWICHES', true, 'http://localhost:8080/images/Club Sandwich.png', NOW(), NOW()),
('Crispy Fired Noodles', 'CFN', 'description for Crispy Fired Noodles', 'Full description for Crispy Fired Noodles', 30, 30, false, 'ASIAN CHOICE', true, 'http://localhost:8080/images/Crispy Fired Noodles.png', NOW(), NOW()),
('Fettuccini Marinara', 'FM', 'description for Fettuccini Marinara', 'Full description for Fettuccini Marinara', 45, 45, false, 'MAINS', true, 'http://localhost:8080/images/Fettuccini Marinara.png', NOW(), NOW()),
('Four Season Pizza', 'FSP', 'description for Four Season Pizza', 'Full description for Four Season Pizza', 50, 50, false, 'PIZZA', true, 'http://localhost:8080/images/Four Season Pizza.png', NOW(), NOW()),
('Hawaiian Pizza', 'HP', 'description for Hawaiian Pizza', 'Full description for Hawaiian Pizza', 50, 50, false, 'PIZZA', true, 'http://localhost:8080/images/Hawaiian Pizza.png', NOW(), NOW()),
('Lagua Monster Burger', 'LMB', 'description for Lagua Monster Burger', 'Full description for Lagua Monster Burger', 38, 38, false, 'BURGERS & SANDWICHES', true, 'http://localhost:8080/images/Lagua Monster Burger.png', NOW(), NOW()),
('Laguna Chicken Fillet Burger', 'LCFB', 'description for Laguna Chicken Fillet Burger', 'Full description for Laguna Chicken Fillet Burger', 38, 38, false, 'BURGERS & SANDWICHES', true, 'http://localhost:8080/images/Laguna Chicken Fillet Burger.png', NOW(), NOW()),
('Laguna Mee Mak', 'LMM', 'description for Laguna Mee Mak', 'Full description for Laguna Mee Mak', 30, 30, false, 'ASIAN CHOICE', true, 'http://localhost:8080/images/Laguna Mee Mak.png', NOW(), NOW()),
('Laksa Combination', 'LC', 'description for Laksa Combination', 'Full description for Laksa Combination', 30, 30, false, 'ASIAN CHOICE', true, 'http://localhost:8080/images/Laksa Combination.png', NOW(), NOW()),
('Mixed Fried Rice', 'MFR', 'description for Mixed Fried Rice', 'Full description for Mixed Fried Rice', 40, 40, false, 'ASIAN CHOICE', true, 'http://localhost:8080/images/Mixed Fried Rice.png', NOW(), NOW()),
('Mongolian Lamb', 'ML', 'description for Mongolian Lamb', 'Full description for Mongolian Lamb', 45, 44, false, 'MAINS', true, 'http://localhost:8080/images/Mongolian Lamb.png', NOW(), NOW()),
('Oven Baked Garlic Bread', 'OBGB', 'description for Oven Baked Garlic Bread', 'Full description for Oven Baked Garlic Bread', 12, 11, false, 'STARTERS & SALADS', true, 'http://localhost:8080/images/Oven Baked Garlic Bread.png', NOW(), NOW()),
('Oxtail Soup', 'OS', 'description for Oxtail Soup', 'Full description for Oxtail Soup', 40, 39, false, 'MAINS', true, 'http://localhost:8080/images/Oxtail Soup.png', NOW(), NOW()),
('Penag Char Koay Teow', 'PCKT', 'description for Penag Char Koay Teow', 'Full description for Penag Char Koay Teow', 30, 29, false, 'ASIAN CHOICE', true, 'http://localhost:8080/images/Penag Char Koay Teow.png', NOW(), NOW()),
('Prawn Cocktail', 'PC', 'description for Prawn Cocktail', 'Full description for Prawn Cocktail', 35, 34, false, 'STARTERS & SALADS', true, 'http://localhost:8080/images/Prawn Cocktail.png', NOW(), NOW()),
('Ragu Bolognaise', 'RB', 'description for Ragu Bolognaise', 'Full description for Ragu Bolognaise', 35, 34, false, 'MAINS', true, 'http://localhost:8080/images/Ragu Bolognaise.png', NOW(), NOW()),
('Roasted Half Chicken', 'RHC', 'description for Roasted Half Chicken', 'Full description for Roasted Half Chicken', 50, 49, false, 'MAINS', true, 'http://localhost:8080/images/Roasted Half Chicken.png', NOW(), NOW()),
('Tandoori Chicken Pizza', 'TCP', 'description for Tandoori Chicken Pizza', 'Full description for Tandoori Chicken Pizza', 50, 49, false, 'PIZZA', true, 'http://localhost:8080/images/Tandoori Chicken Pizza.png', NOW(), NOW()),
('Thai Beef Salad', 'TBS', 'description for Thai Beef Salad', 'Full description for Thai Beef Salad', 35, 34, false, 'STARTERS & SALADS', true, 'http://localhost:8080/images/Thai Beef Salad.png', NOW(), NOW());




INSERT INTO orders (total_price, table_num, date, email, status, additional_info, createdAt, updatedAt)
VALUES
(266, 1, NOW(), 'john@example.com', 1, 'Allergy to nuts', NOW(), NOW()),
(160, 2, NOW(), 'jane@example.com', 1, 'Vegan options', NOW(), NOW());


INSERT INTO details (quantity, createdAt, updatedAt, orderId, dishId)
VALUES
(2, NOW(), NOW(), 1, 1), -- 2 x Atlantic Salmon for Order 1
(1, NOW(), NOW(), 1, 3), -- 1 x Bruschetta for Order 1
(3, NOW(), NOW(), 1, 6), -- 3 x Carnivore Pizza for Order 1
(1, NOW(), NOW(), 2, 2), -- 1 x BBQ Prok Ribs for Order 2
(2, NOW(), NOW(), 2, 4), -- 2 x Buffalo Wings for Order 2
(1, NOW(), NOW(), 2, 5); -- 1 x Caesar Salad for Order 2




// some depreciated functions

import React, { useState } from 'react';
import useWebSocket from 'react-use-websocket';
const WS_URL = 'ws://localhost:8080';

function HomePage() {
  const [messages, setMessages] = useState([]);

  const {
    sendMessage,
    readyState,
  } = useWebSocket(WS_URL, {
    onOpen: () => {
      console.log('WebSocket connection established.');
    },
    onMessage: (event) => {
      const newMessage = event.data;
      setMessages((prevMessages) => [...prevMessages, newMessage]);
    },
  });

  const handleButtonClick = () => {
    if (readyState === WebSocket.OPEN) {
      sendMessage('Hello, server!');
    } else {
      console.log('WebSocket connection is not open.');
    }
  };

  return (
    <div>
      <div>This is Home page</div>
      <button onClick={handleButtonClick}>Send message to server</button>
      <textarea
        readOnly
        value={messages.join('\n')}
        rows="10"
        cols="50"
        style={{ marginTop: '10px', resize: 'none' }}
      />
    </div>
  );
}

export default HomePage;

